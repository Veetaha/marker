use crate::common::{Level, MacroReport};

/// This struct defines a lint.
///
/// It should never be constructed directly, the [`declare_lint`](crate::declare_lint)
/// macro should be used instead, like this:
///
/// ```
/// marker_api::declare_lint!{
///     /// # What it does
///     /// Here you can describe what your lint does.
///     ///
///     /// # Example
///     /// ```
///     /// <bad example>
///     /// ```
///     ///
///     /// Use instead
///     /// ```
///     /// <bad example>
///     /// ```
///     ITEM_WITH_TEST_NAME,
///     Warn,
/// }
/// ```
///
/// The fields of this struct are public, to allow the instantiation in constant
/// context. Marker reserves the right to add new fields, as long the lint can still
/// be constructed using the [`declare_lint`](crate::declare_lint) macro.
#[repr(C)]
#[derive(Debug, PartialEq, Eq, Hash)]
pub struct Lint {
    /// A string identifier for the lint.
    ///
    /// This identifies the lint in attributes and in command-line arguments.
    /// In those contexts it is always lowercase. This allows
    /// [`declare_lint`](crate::declare_lint) macro invocations to follow the
    /// convention of upper-case statics without repeating the name.
    ///
    /// The name is written with underscores, e.g., "unused_imports".
    /// On the command line, underscores become dashes.
    ///
    /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html#lint-naming>
    /// for naming guidelines.
    pub name: &'static str,

    /// Default level for the lint.
    ///
    /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels>
    /// for guidelines on choosing a default level.
    pub default_level: Level,

    /// Description of the lint or the issue it detects.
    ///
    /// e.g., "imports that are never used"
    pub explanation: &'static str,

    /// The level of macro reporting.
    ///
    /// See [`MacroReport`] for the possible levels.
    pub report_in_macro: MacroReport,

    /// This struct should always be instantiated using the [`declare_lint`](crate::declare_lint)
    /// macro. This value is simply here, to force any construction to acknowledge the
    /// instability of manual construction.
    pub _unstable_i_accept_the_risk_of_instability: (),
}

/// This macro creates a new lint instance. The doc comment of the lint will be
/// available in the crate documentation and any documentation generated by Marker.
/// The content will be rendered with Markdown.
///
/// It's recommended to include a section explaining what the lint does, and an
/// example. You can also provide additional information, like "limitations" or
/// "known problems". Here is a recommended template:
///
/// ```
/// marker_api::declare_lint!{
///     /// # What it does
///     /// Here you can describe what your lint does.
///     ///
///     /// # Example
///     /// ```
///     /// <bad example>
///     /// ```
///     ///
///     /// Use instead
///     /// ```
///     /// <bad example>
///     /// ```
///     ITEM_WITH_TEST_NAME,
///     Warn,
/// }
/// ```
#[macro_export]
macro_rules! declare_lint {
    (
        $(#[doc = $doc:literal])+
        $NAME: ident,
        $LEVEL: ident $(,)?
    ) => {
        $crate::declare_lint!{
            $(#[doc = $doc])+
            $NAME,
            $LEVEL,
            $crate::common::MacroReport::No,
        }
    };
    (
        $(#[doc = $doc:literal])+
        $NAME: ident,
        $LEVEL: ident,
        $REPORT_IN_MACRO: expr $(,)?
    ) => {
        $(#[doc = $doc])+
        pub static $NAME: &$crate::Lint = &$crate::Lint {
            name: concat!("marker::", stringify!($NAME)),
            default_level: $crate::common::Level::$LEVEL,
            explanation: concat!($($doc, '\n',)*),
            report_in_macro: $REPORT_IN_MACRO,
            _unstable_i_accept_the_risk_of_instability: (),
        };
    };
}
